{"version":3,"sources":["spacex.jpg","components/LaunchItem.js","components/launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LaunchItem","launch","flight_number","mission_name","launch_date_local","launch_success","Card","style","display","color","to","Button","styled","div","button","LAUNCHES_QUERY","gql","Launches","Container","query","loading","error","data","type","height","width","margin","Stats","Green","marginRight","Red","launches","map","key","Component","LAUNCH_QUERY","Launch","this","props","match","params","parseInt","Cards","variables","console","log","launch_year","rocket","rocket_id","rocket_type","rocket_name","client","ApolloClient","uri","App","className","src","logo","alt","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.4f398014.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spacex.88c80853.jpg\";","import React from 'react'\nimport styled from 'styled-components'\nimport { Link } from 'react-router-dom'\n\nexport default function LaunchItem({ \n    launch: { \n        flight_number, \n        mission_name, \n        launch_date_local, \n        launch_success,\n        \n    } }) {\n   \n    return (\n        <Card> \n           <h1 style={{ display: 'inline-block' }}> Mission: </h1> <h1 style={{ display: 'inline-block', color: launch_success ? '#A6CB12' : '#E00543'}}> {mission_name}</h1>\n           <p>\n            Date: {launch_date_local}\n          </p>\n            <Link to={`/launch/${flight_number}`} >\n            <Button>Launch Details</Button>\n            </Link>\n        </Card>\n    )\n\n}\n\n\nconst Card = styled.div`\n    width: 800px;\n    margin: 20px 0;\n    \n    padding: 20px;\n    background: #393e46;\n    border-radius: 2px%;\n    @media (max-width: 800px) {\n        width: 300px;\n      } \n`\n\nconst Button = styled.button`\n    background: #222831;\n    color: #FAFAFA;\n    border-radius: 5%;\n    padding: 10px;\n    pointer: cursor;\n    border: none;\n`\n","import React, { Component } from 'react'\nimport styled from 'styled-components'\nimport gql from 'graphql-tag'\nimport { Query } from 'react-apollo'\nimport LaunchItem from './LaunchItem'\n\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\nimport Loader from 'react-loader-spinner'\n\nconst LAUNCHES_QUERY = gql`\n    query LaunchsQuery {\n        launches {\n            flight_number\n            mission_name\n            launch_date_local\n            launch_success\n        }\n\n    }\n`\n\nexport class Launches extends Component {\n   render() {\n    return (\n        <Container>\n           \n               \n            \n        <Query query={LAUNCHES_QUERY}>\n          {({ loading, error, data }) => {\n            if (loading) return <Loader type=\"TailSpin\" color=\"#00BFFF\" height={80} width={80} />\n            if (error) return <h2 style={{ margin: 'auto'}}>Something went wrong!</h2>\n        \n            return (\n              <Stats>\n                 <h1 style={{ }}>Launches</h1>\n                <Green></Green> <p style={{ display: 'inline-block', marginRight: '20px' }}>  = Success</p>\n                <Red></Red> <p style={{ display: 'inline' }}>  = Fail</p>\n                {data.launches.map(launch => (\n                  <LaunchItem key={launch.flight_number} launch={launch} />\n                ))}\n              </Stats>\n            );\n          }}\n        </Query>\n        </Container>\n        )\n    }\n}\n\nexport default Launches\n\nconst Container = styled.div`\n  color: #FAFAFA;\n  width: 100%;\n  \n  \n`\nconst Green = styled.div`\n    background: #A6CB12;\n    width: 70px;\n    margin-bottom: 10px;\n    height: 30px;\n    text-align: center;\n    vertical-align: middle;\n    color: black;\n    display: inline-block;\n    \n`\n\nconst Red = styled.div`\n    background: #E00543;\n    width: 70px;\n    height: 30px;\n    text-align: center;\n    vertical-align: middle;\n    margin: 0 0 10px 0;\n    display: block;\n    color: black;\n    display: inline-block;\n\n    \n`\nconst Stats = styled.div`\n    margin-left: 250px;\n    @media (max-width: 700px) {\n      margin-left: 10px;\n    } \n`\n","import React, { Component } from 'react'\nimport styled from 'styled-components'\nimport gql from 'graphql-tag'\nimport { Query } from 'react-apollo'\nimport { Link } from 'react-router-dom'\n\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\nimport Loader from 'react-loader-spinner'\n\nconst LAUNCH_QUERY = gql`\n    query LaunchQuery($flight_number: Int!) {\n        launch(flight_number: $flight_number) {\n            flight_number\n            mission_name\n            launch_year\n            launch_date_local\n            launch_success,\n            rocket{\n                rocket_id\n                rocket_name\n                rocket_type \n            }\n        }\n    }\n`;\n\nexport class Launch extends Component {\n    render() {\n    let { flight_number } = this.props.match.params;\n    flight_number = parseInt(flight_number);\n    return (\n    <Cards>\n        <Query query={LAUNCH_QUERY} variables={{flight_number}}>\n             {({ loading, error, data }) => {\n                    if (loading) return <Loader type=\"TailSpin\" margin=\"auto\" color=\"#00BFFF\" height={80} width={80} />\n                    if (error) return <h2>Something went wrong!</h2>\n                            console.log(data)\n                    const {\n                        flight_number,\n                        launch_success,\n                        launch_year,\n                        mission_name,\n                        rocket: { rocket_id, rocket_type, rocket_name }\n                    } = data.launch;\n\n                    return (\n                        <div>\n                        <h1>Mission: {mission_name}</h1>\n                        <h3>Launch Details</h3>\n                        <Card>\n                            <p>Flight number: {flight_number}</p>\n                            <p>Launch Year: {launch_year}</p>\n                           <p>Launch Successful: <span style={{ color: launch_success ? 'green' : 'red' }}>{launch_success ? 'Yes' : 'No'}</span></p>\n                        </Card>\n                        <h3>Rocket Details</h3>\n                        <Card>\n                            <p>Rocket Name: {rocket_name}</p>\n                            <p>Rocket Type: {rocket_type}</p>\n                            <p>Rocket ID: {rocket_id}</p>\n                        </Card>\n                        <Link to=\"/\">\n                            <Button>Back</Button>\n                        </Link>\n                        </div>\n                    )\n            }}\n        </Query>\n    </Cards>\n        \n    )\n}\n}\nexport default Launch;\n\nconst Cards = styled.div`\n    color: white;\n    margin-left: 10%;\n`\n\nconst Card = styled.div`\n    width: 400px;\n    background: #393e46;\n    color: white;\n    padding: 5px;\n    font-size: 20px;\n    @media (max-width: 600px) {\n        width: 300px;\n      } \n`\n\nconst Button = styled.button`\n    background: #393e46;\n    color: #FAFAFA;\n    border-radius: 5%;\n    padding: 10px;\n    pointer: cursor;\n    border: none;\n    margin-top: 10px;\n`\n\n\n\n\n\n/*  Rocket ID: {rocket_id}\n                            Rocket Name: {rocket_name}\n                            Rocket Type: {rocket_type}\n                              <p>Flight Number: {flight_number}</p>\n                <p>Launch Year:{launch_date_local}</p>\n                Launch Successful: <p style={{content: 'Yes'}}> {item.launch_success}</p>\n                            */","import React from 'react';\nimport './App.css';\nimport logo from './spacex.jpg';\nimport Launches from './components/launches';\nimport Launch from './components/Launch'\nimport { ApolloProvider } from 'react-apollo';\nimport ApolloClient from 'apollo-boost';\nimport { BrowserRouter as Router, Route } from 'react-router-dom'; \n\nconst client = new ApolloClient({\n  uri: '/graphql',\n\n})\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n      <div className=\"App\">\n        <img\n        src={logo}\n        alt=\"SpaceX\"\n        style={{width: 350, margin: 'auto', display: 'block'}}\n        />\n       <Route exact path=\"/\" component={Launches}/>\n       <Route path=\"/launch/:flight_number\" component={Launch} />\n      </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}